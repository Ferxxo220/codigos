package com.mycompany.automatafd1;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class AFD4 {
    private String estadoActual;
    private final String estadoInicial = "q0";
    private final List<String> estadosAceptacion = Arrays.asList(
        "q0,q1,q2,q3", "q0,q3,q2", "q0,q1,q3", "q0,q3" 
    );
    private Map<String, Map<String, String>> transiciones;

    public AFD4() {
        estadoActual = estadoInicial;
        transiciones = new HashMap<>();
        inicializarTransiciones();
    }

    private void inicializarTransiciones() {
       
        agregarTransicion("q0", "a", "q0,q1");
        agregarTransicion("q0", "b", "q0");

        
        agregarTransicion("q0,q1", "a", "q0,q1,q2");
        agregarTransicion("q0,q1", "b", "q0,q3");

        agregarTransicion("q0,q1,q2", "a", "q0,q1,q2,q3");
        agregarTransicion("q0,q1,q2", "b", "q0,q3");

       
        agregarTransicion("q0,q1,q2,q3", "a", "q0,q1,q2,q3");
        agregarTransicion("q0,q1,q2,q3", "b", "q0,q3,q2");

        agregarTransicion("q0,q3,q2", "a", "q0,q1,q3");
        agregarTransicion("q0,q3,q2", "b", "q0,q2");

      
        agregarTransicion("q0,q1,q3", "a", "q0,q1");
        agregarTransicion("q0,q1,q3", "b", "q0,q3,q2");


        agregarTransicion("q0,q2", "a", "q0,q1,q3");
        agregarTransicion("q0,q2", "b", "q0");

      
        agregarTransicion("q0,q3", "a", "q0,q1");
        agregarTransicion("q0,q3", "b", "q0,q2");
    }

    private void agregarTransicion(String estado, String simbolo, String nuevoEstado) {
        transiciones.computeIfAbsent(estado, k -> new HashMap<>()).put(simbolo, nuevoEstado);
    }

    public boolean procesarCadena(String cadena) {
        estadoActual = estadoInicial;
        
        for (int i = 0; i < cadena.length(); i++) {
            String simbolo = String.valueOf(cadena.charAt(i));
            
            if (!simbolo.equals("a") && !simbolo.equals("b")) {
                return false;
            }
            
            Map<String, String> transicionesEstado = transiciones.get(estadoActual);
            if (transicionesEstado == null) {
                return false;
            }
            
            String nuevoEstado = transicionesEstado.get(simbolo);
            if (nuevoEstado == null) {
                return false;
            }
            
            estadoActual = nuevoEstado;
        }
        
        return estadosAceptacion.contains(estadoActual);
    }

    public void validarCadenas(List<String> cadenasW) {
        System.out.println("\n=== RESULTADOS DE VALIDACION ===");
        cadenasW.forEach(cadena -> {
            if (procesarCadena(cadena)) {
                System.out.println( cadena + " VALIDA");
            } else {
                System.out.println( cadena + " NO VALIDA");
            }
        });
        System.out.println("==============================");
    }

    public static void main(String[] args) {
        AFD4 automataFD7 = new AFD4();
        
   
        List<String> cadenas = Arrays.asList(
            "aaa", "abb"
        );
      
        automataFD7.validarCadenas(cadenas);
        
       
        Scanner scanner = new Scanner(System.in);
        System.out.println("\nÂ¿Desea probar cadenas adicionales? (s/n)");
        String respuesta = scanner.nextLine().trim().toLowerCase();
        
        if (respuesta.equals("s")) {
            System.out.println("Ingrese las cadenas separadas por comas:");
            String input = scanner.nextLine();
            List<String> cadenasUsuario = Arrays.asList(input.split("\\s*,\\s*"));
            automataFD7.validarCadenas(cadenasUsuario);
        }
        
        scanner.close();
    }
}
